{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'./axios';import\"./Row.css\";import YouTube from\"react-youtube\";// import movieTrailer from \"movie-trailer\";\nvar base_url=\"https:/image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchURL=_ref.fetchURL,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];//snippet of code which runs based on a specific condition/variable\nuseEffect(function(){// if [], run once when the row loads, and dont run again.\n// we have to make asynchronous call.\nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchURL);case 2:request=_context.sent;//\"https://api.themoviedb.org/3/\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchURL]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};// const handleClick = async(movie) => {\n//     if (trailerUrl) {\n//         setTrailerUrl(\"\");\n//     }else {\n//         movieTrailer(movie?.name || \"\")\n//         .then((url) => {\n//             const urlParams = new URLSearchParams(new URL(url).search);\n//             setTrailerUrl(urlParams.get(\"v\"));\n//         })\n//         .catch((error) => console.log(error));\n//     }\n// }; \nvar handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var _trailerurl$data$resu,trailerurl;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!trailerUrl){_context2.next=4;break;}setTrailerUrl(\"\");_context2.next=8;break;case 4:_context2.next=6;return axios.get(\"/movie/\".concat(movie.id,\"/videos?api_key=fb34530271b349314af0de263d16ab5a\"));case 6:trailerurl=_context2.sent;setTrailerUrl((_trailerurl$data$resu=trailerurl.data.results[0])===null||_trailerurl$data$resu===void 0?void 0:_trailerurl$data$resu.key);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alr:movie.name// key={movie.id}\n,onClick:function onClick(){return handleClick(movie);}},movie.id);})}),/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","id","trailerurl","key","map","poster_path","backdrop_path","name"],"mappings":"unBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA;AAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA4C,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,QAAuB,MAAvBA,QAAuB,CAAbC,UAAa,MAAbA,UAAa,eACZR,QAAQ,CAAC,EAAD,CADI,wCACjCS,MADiC,eACzBC,SADyB,8BAEJV,QAAQ,CAAC,EAAD,CAFJ,yCAEjCW,UAFiC,eAErBC,aAFqB,eAIxC;AACAX,SAAS,CAAE,UAAM,CACb;AACA;AAFa,QAGEY,CAAAA,SAHF,qIAGb,qKAC0BX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEI;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHJ,gCAIWF,OAJX,wDAHa,4CASbF,SAAS,GACZ,CAVQ,CAUN,CAACN,QAAD,CAVM,CAAT,CAYA,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHH,CAAb,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,WAAW,2FAAG,kBAAOC,KAAP,+JACZb,UADY,0BAEdC,aAAa,CAAC,EAAD,CAAb,CAFc,qDAISV,CAAAA,KAAK,CAACY,GAAN,kBACXU,KAAK,CAACC,EADK,qDAJT,QAIVC,UAJU,gBAOdd,aAAa,wBAACc,UAAU,CAACV,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,gDAAC,sBAA4BU,GAA7B,CAAb,CAPc,wDAAH,kBAAXJ,CAAAA,WAAW,6CAAjB,CAWA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAKjB,KAAL,EADJ,cAGI,YAAK,SAAS,CAAC,cAAf,UAEKG,MAAM,CAACmB,GAAP,CAAW,SAAAJ,KAAK,qBACb,YAEI,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAFb,CAGI,GAAG,WAAKJ,QAAL,SACCI,UAAU,CAAGgB,KAAK,CAACK,WAAT,CAAuBL,KAAK,CAACM,aADxC,CAHP,CAMI,GAAG,CAAEN,KAAK,CAACO,IACX;AAPJ,CAQI,OAAO,CAAE,yBAAMR,CAAAA,WAAW,CAACC,KAAD,CAAjB,EARb,EACKA,KAAK,CAACC,EADX,CADa,EAAhB,CAFL,EAHJ,cAkBI,KAAC,OAAD,EAAS,OAAO,CAAEd,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAlBJ,CAmBKP,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAnBnB,GADJ,CAuBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchURL, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    //snippet of code which runs based on a specific condition/variable\n    useEffect (() => {\n        // if [], run once when the row loads, and dont run again.\n        // we have to make asynchronous call.\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            //\"https://api.themoviedb.org/3/\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    // const handleClick = async(movie) => {\n    //     if (trailerUrl) {\n    //         setTrailerUrl(\"\");\n    //     }else {\n    //         movieTrailer(movie?.name || \"\")\n    //         .then((url) => {\n    //             const urlParams = new URLSearchParams(new URL(url).search);\n    //             setTrailerUrl(urlParams.get(\"v\"));\n    //         })\n    //         .catch((error) => console.log(error));\n    //     }\n    // }; \n\n    const handleClick = async (movie) => {\n        if (trailerUrl) {\n          setTrailerUrl(\"\");\n        } else {\n          let trailerurl = await axios.get(\n            `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n          );\n          setTrailerUrl(trailerurl.data.results[0]?.key);\n        }\n      };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path \n                        }`} \n                        alr={movie.name}\n                        // key={movie.id}\n                        onClick={() => handleClick(movie)}\n                    />\n                ))}\n            </div>\n            <YouTube videoId={trailerUrl} opts={opts} />\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}