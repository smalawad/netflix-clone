{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\"; // import movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); //snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    // if [], run once when the row loads, and dont run again.\n    // we have to make asynchronous call.\n    async function fetchData() {\n      const request = await axios.get(fetchURL); //\"https://api.themoviedb.org/3/\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  }; // const handleClick = async(movie) => {\n  //     if (trailerUrl) {\n  //         setTrailerUrl(\"\");\n  //     }else {\n  //         movieTrailer(movie?.name || \"\")\n  //         .then((url) => {\n  //             const urlParams = new URLSearchParams(new URL(url).search);\n  //             setTrailerUrl(urlParams.get(\"v\"));\n  //         })\n  //         .catch((error) => console.log(error));\n  //     }\n  // }; \n\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alr: movie.name // key={movie.id}\n        ,\n        onClick: () => handleClick(movie)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerurl","id","key","map","poster_path","backdrop_path","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB,C,CACA;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C,CAFwC,CAIxC;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA,mBAAeY,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUR,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAVQ,EAUN,CAACN,QAAD,CAVM,CAAT;AAYA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb,CAjBwC,CAyBxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACjC,QAAIb,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AAAA;;AACL,UAAIa,UAAU,GAAG,MAAMvB,KAAK,CAACa,GAAN,CACpB,UAASS,KAAK,CAACE,EAAG,kDADE,CAAvB;AAGAd,MAAAA,aAAa,0BAACa,UAAU,CAACT,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,0DAAC,sBAA4BU,GAA7B,CAAb;AACD;AACF,GATH;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKrB;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKG,MAAM,CAACmB,GAAP,CAAWJ,KAAK,iBACb;AAEI,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAF/D;AAGI,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACbI,UAAU,GAAGgB,KAAK,CAACK,WAAT,GAAuBL,KAAK,CAACM,aAC1C,EALL;AAMI,QAAA,GAAG,EAAEN,KAAK,CAACO,IANf,CAOI;AAPJ;AAQI,QAAA,OAAO,EAAE,MAAMR,WAAW,CAACC,KAAD;AAR9B,SACKA,KAAK,CAACE,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAHJ,eAkBI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEf,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAlBJ,EAmBKP,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAnBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GAxEQb,G;;KAAAA,G;AA0ET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchURL, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    //snippet of code which runs based on a specific condition/variable\n    useEffect (() => {\n        // if [], run once when the row loads, and dont run again.\n        // we have to make asynchronous call.\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            //\"https://api.themoviedb.org/3/\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    // const handleClick = async(movie) => {\n    //     if (trailerUrl) {\n    //         setTrailerUrl(\"\");\n    //     }else {\n    //         movieTrailer(movie?.name || \"\")\n    //         .then((url) => {\n    //             const urlParams = new URLSearchParams(new URL(url).search);\n    //             setTrailerUrl(urlParams.get(\"v\"));\n    //         })\n    //         .catch((error) => console.log(error));\n    //     }\n    // }; \n\n    const handleClick = async (movie) => {\n        if (trailerUrl) {\n          setTrailerUrl(\"\");\n        } else {\n          let trailerurl = await axios.get(\n            `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n          );\n          setTrailerUrl(trailerurl.data.results[0]?.key);\n        }\n      };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path \n                        }`} \n                        alr={movie.name}\n                        // key={movie.id}\n                        onClick={() => handleClick(movie)}\n                    />\n                ))}\n            </div>\n            <YouTube videoId={trailerUrl} opts={opts} />\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}