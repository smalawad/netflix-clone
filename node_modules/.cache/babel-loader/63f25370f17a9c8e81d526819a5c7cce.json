{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); //snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    // if [], run once when the row loads, and dont run again.\n    // we have to make asynchronous call.\n    async function fetchData() {\n      const request = await axios.get(fetchURL); //\"https://api.themoviedb.org/3/\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerUrl = await axios.get(`/movie/${movie.id}/videos?api_key=28f0cc330ceb6ad4071456d1d98a51f3`);\n    }\n  }; // console.table(movies);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alr: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchURL","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerUrl","setTrailerUrl","id","map","poster_path","backdrop_path","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC,CADwC,CAGxC;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA,mBAAeU,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUN,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAVQ,EAUN,CAACJ,QAAD,CAVM,CAAT;AAYA,QAAMS,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAG,MAAMC,KAAN,IAAgB;AAChC,QAAIC,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEM;AACF,UAAID,UAAU,GAAG,MAAMrB,KAAK,CAACW,GAAN,CAClB,UAASS,KAAK,CAACG,EAAG,kDADA,CAAvB;AAGH;AACJ,GARD,CAxBwC,CAgCnC;;;AACL,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKnB;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKG,MAAM,CAACiB,GAAP,CAAWJ,KAAK,iBACb;AAEI,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF9B;AAGI,QAAA,SAAS,EAAG,eAAcd,UAAU,IAAI,kBAAmB,EAH/D;AAII,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACbI,UAAU,GAAGc,KAAK,CAACK,WAAT,GAAuBL,KAAK,CAACM,aAC1C,EANL;AAOI,QAAA,GAAG,EAAEN,KAAK,CAACO;AAPf,SACKP,KAAK,CAACG,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAHJ,eAiBI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEF,UAAlB;AAA8B,MAAA,IAAI,EAAEP;AAApC;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GAtDQX,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\n\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchURL, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n\n    //snippet of code which runs based on a specific condition/variable\n    useEffect (() => {\n        // if [], run once when the row loads, and dont run again.\n        // we have to make asynchronous call.\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            //\"https://api.themoviedb.org/3/\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = async(movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        }else {\n            let trailerUrl = await axios.get(\n                `/movie/${movie.id}/videos?api_key=28f0cc330ceb6ad4071456d1d98a51f3`\n            )\n        }\n    }    // console.table(movies);\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path \n                        }`} \n                        alr={movie.name}\n                    />\n                ))}\n            </div>\n            <YouTube videoId={trailerUrl} opts={opts} />\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}