{"ast":null,"code":"'use strict';\n\n(function (root, cx) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['isomorphic-fetch'], cx);\n  } else if (typeof exports === 'object') {\n    // Node, CommonJS-like\n    module.exports = cx(require('isomorphic-fetch'));\n  } else {\n    // Browser globals (root is window)\n    root.movieTrailer = cx(root.fetch);\n  }\n})(this, function (fetch) {\n  function toUrl(videoId) {\n    return encodeURI('https://www.youtube.com/watch?v=' + videoId);\n  }\n\n  function getMovieId(search, year, language, apiKey) {\n    /* Fetch a Movie ID for querying the TMDB API */\n    const url = 'https://api.themoviedb.org' + encodeURI('/3/search/movie?api_key=' + apiKey + '&query=' + search + (year !== null ? '&year=' + year : '') + (language !== null ? '&language=' + language : ''));\n    const response = fetch(url, {\n      method: 'GET'\n    }).then(res => res.json(), err => Promise.reject(err.message)).then(json => {\n      if (typeof json.status_message !== 'undefined') {\n        // Error\n        return Promise.reject(new Error(`JSON - ${json.status_message}`));\n      } else if (json.results.length === 0) {\n        // Retry failed search without year\n        if (year !== null) {\n          getMovieId(search, null, language);\n        } else {\n          // Error\n          return Promise.reject(new Error('API - No results found'));\n        }\n      } else {\n        return json.results[0].id;\n      }\n    }).catch(error => error);\n    return response;\n  }\n\n  function getTrailer(movieId, multi, videoId, language, apiKey) {\n    /* Fetch single or multiple movie trailers via the TMDB API */\n    const endpoint = 'https://api.themoviedb.org' + encodeURI('/3/movie/' + movieId + '/videos?api_key=' + apiKey + (language !== null ? '&language=' + language : ''));\n    const response = fetch(endpoint, {\n      method: 'GET'\n    }).then(res => res.json(), err => Promise.reject(err.message)).then(json => {\n      if (typeof json.status_message !== 'undefined') {\n        // Error\n        return Promise.reject(new Error(`JSON - ${json.status_message}`));\n      } else if (json.results.length === 0) {\n        // Error\n        return Promise.reject(new Error('API - No results found'));\n      }\n\n      let results = json.results; // Strip all but videoId\n\n      results = results.map(result => {\n        return result.key;\n      });\n\n      if (!videoId) {\n        // Return Youtube videoID or full `Watch` URL\n        results = results.map(toUrl);\n      }\n\n      if (multi) {\n        // Return *unique* urls\n        return Array.from(new Set(results));\n      } else {\n        return results[0];\n      }\n    });\n    return response;\n  }\n\n  function movieTrailer(movie, options, cb, legacy) {\n    /* Fetch movie trailers */\n    // Massage inputs\n    let opts = {\n      multi: false,\n      id: false,\n      year: null,\n      language: null,\n      // Public Key on purpose\n      api_key: '9d2bff12ed955c7f1f74b83187f188ae'\n    };\n\n    if (typeof movie !== 'string') {\n      throw new Error('Expected first parameter to be a movie (string)');\n    } else if (typeof options === 'function') {\n      // Second parameter is the callback\n      cb = options;\n      options = null;\n    } else if (typeof options === 'boolean' || options === 'true') {\n      // Second parameter is multi\n      opts.multi = options;\n    } else if (typeof options === 'string' || typeof options === 'number') {\n      // Second parameter is year\n      opts.year = options;\n      /* BACKWARDS-COMPATABILITY FOR v1 */\n\n      if (typeof legacy === 'function' && (typeof cb === 'boolean' || typeof cb === 'string' && cb === 'true')) {\n        // Third parameter is multi\n        opts.multi = cb;\n        cb = legacy;\n      }\n      /* END BACKWARDS-COMPATABILITY */\n\n    } else if (typeof options === 'object') {\n      // Set options\n      opts = Object.assign(opts, options);\n    } // Remove invalid callback\n\n\n    if (typeof cb !== 'function') cb = null;\n    const response = getMovieId(movie, opts.year, opts.language, opts.api_key).then(movieId => {\n      return getTrailer(movieId, opts.multi, opts.id, opts.language, opts.api_key);\n    }); // Callback\n\n    if (cb) {\n      return response.then(res => cb(null, res), err => cb(err, null));\n    } // Promise\n\n\n    return response;\n  } // Exposed public method\n\n\n  return movieTrailer;\n});","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/movie-trailer/index.js"],"names":["root","cx","define","amd","exports","module","require","movieTrailer","fetch","toUrl","videoId","encodeURI","getMovieId","search","year","language","apiKey","url","response","method","then","res","json","err","Promise","reject","message","status_message","Error","results","length","id","catch","error","getTrailer","movieId","multi","endpoint","map","result","key","Array","from","Set","movie","options","cb","legacy","opts","api_key","Object","assign"],"mappings":"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","sourcesContent":["'use strict';\n\n( function ( root, cx ) {\n\n\tif ( typeof define === 'function' && define.amd ) {\n\n\t\t// AMD\n\t\tdefine( ['isomorphic-fetch'], cx )\n\n\t} else if ( typeof exports === 'object' ) {\n\n\t\t// Node, CommonJS-like\n\t\tmodule.exports = cx( require( 'isomorphic-fetch' ) )\n\n\t} else {\n\n\t\t// Browser globals (root is window)\n\t\troot.movieTrailer = cx( root.fetch )\n\n\t}\n\n} )( this, function ( fetch ) {\n\n\tfunction toUrl ( videoId ) {\n\n\t\treturn encodeURI( 'https://www.youtube.com/watch?v=' + videoId )\n\n\t}\n\n\tfunction getMovieId ( search, year, language, apiKey ) {\n\n\t\t/* Fetch a Movie ID for querying the TMDB API */\n\n\t\tconst url = 'https://api.themoviedb.org' + encodeURI( '/3/search/movie?api_key=' + apiKey + '&query=' + search + ( ( year !== null ) ? '&year=' + year : '' ) + ( ( language !== null ) ? '&language=' + language : '' ) )\n\n\t\tconst response = fetch( url, {\n\t\t\tmethod: 'GET'\n\t\t} )\n\t\t\t.then(\n\t\t\t\tres => res.json(),\n\t\t\t\terr => Promise.reject( err.message ) )\n\t\t\t.then( json => {\n\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\n\n\t\t\t\t} else if ( json.results.length === 0 ) {\n\n\t\t\t\t\t// Retry failed search without year\n\t\t\t\t\tif ( year !== null ) {\n\n\t\t\t\t\t\tgetMovieId( search, null, language )\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Error\n\t\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn json.results[0].id\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( error => error )\n\n\t\treturn response\n\n\t}\n\n\tfunction getTrailer ( movieId, multi, videoId, language, apiKey ) {\n\n\t\t/* Fetch single or multiple movie trailers via the TMDB API */\n\t\tconst endpoint = 'https://api.themoviedb.org' + encodeURI( '/3/movie/' + movieId + '/videos?api_key=' + apiKey + ( ( language !== null ) ? '&language=' + language : '' ) )\n\t\tconst response = fetch( endpoint, {\n\t\t\tmethod: 'GET'\n\t\t} )\n\t\t\t.then(\n\t\t\t\tres => res.json(),\n\t\t\t\terr => Promise.reject( err.message )\n\t\t\t)\n\t\t\t.then( json => {\n\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\n\n\t\t\t\t} else if ( json.results.length === 0 ) {\n\n\t\t\t\t\t// Error\n\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\n\n\t\t\t\t}\n\n\t\t\t\tlet results = json.results\n\n\t\t\t\t// Strip all but videoId\n\t\t\t\tresults = results.map( result => {\n\n\t\t\t\t\treturn result.key\n\n\t\t\t\t} )\n\n\t\t\t\tif ( !videoId ) {\n\n\t\t\t\t\t// Return Youtube videoID or full `Watch` URL\n\t\t\t\t\tresults = results.map( toUrl )\n\n\t\t\t\t}\n\n\t\t\t\tif ( multi ) {\n\n\t\t\t\t\t// Return *unique* urls\n\t\t\t\t\treturn Array.from( new Set( results ) )\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn results[0]\n\n\t\t\t\t}\n\n\t\t\t} )\n\n\t\treturn response\n\n\t}\n\n\tfunction movieTrailer ( movie, options, cb, legacy ) {\n\n\t\t/* Fetch movie trailers */\n\n\t\t// Massage inputs\n\t\tlet opts = {\n\t\t\tmulti: false,\n\t\t\tid: false,\n\t\t\tyear: null,\n\t\t\tlanguage: null,\n\n\t\t\t// Public Key on purpose\n\t\t\tapi_key: '9d2bff12ed955c7f1f74b83187f188ae',\n\t\t}\n\n\t\tif ( typeof movie !== 'string' ) {\n\n\t\t\tthrow new Error( 'Expected first parameter to be a movie (string)' )\n\n\t\t} else if ( typeof options === 'function' ) {\n\n\t\t\t// Second parameter is the callback\n\t\t\tcb = options\n\t\t\toptions = null\n\n\t\t} else if ( typeof options === 'boolean' || options === 'true' ) {\n\n\t\t\t// Second parameter is multi\n\t\t\topts.multi = options\n\n\t\t} else if ( typeof options === 'string' || typeof options === 'number' ) {\n\n\t\t\t// Second parameter is year\n\t\t\topts.year = options\n\n\t\t\t/* BACKWARDS-COMPATABILITY FOR v1 */\n\t\t\tif ( typeof legacy === 'function' && ( typeof cb === 'boolean' || ( typeof cb === 'string' && cb === 'true' ) ) ) {\n\n\t\t\t\t// Third parameter is multi\n\t\t\t\topts.multi = cb\n\t\t\t\tcb = legacy\n\n\t\t\t}\n\t\t\t/* END BACKWARDS-COMPATABILITY */\n\n\t\t} else if ( typeof options === 'object' ) {\n\n\t\t\t// Set options\n\t\t\topts = Object.assign( opts, options )\n\n\t\t}\n\n\t\t// Remove invalid callback\n\t\tif ( typeof cb !== 'function' ) cb = null\n\n\t\tconst response = getMovieId( movie, opts.year, opts.language, opts.api_key )\n\t\t\t.then( movieId => {\n\n\t\t\t\treturn getTrailer( movieId, opts.multi, opts.id, opts.language, opts.api_key )\n\n\t\t\t} )\n\n\t\t// Callback\n\t\tif ( cb ) {\n\n\t\t\treturn response.then( res => cb( null, res ), err => cb( err, null ) )\n\n\t\t}\n\n\t\t// Promise\n\t\treturn response\n\n\t}\n\n\t// Exposed public method\n\treturn movieTrailer\n\n} )\n"]},"metadata":{},"sourceType":"script"}