{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react'\n// import axios from './axios';\n// import \"./Row.css\";\n// import YouTube from \"react-youtube\";\n// // import movieTrailer from \"movie-trailer\";\n// const base_url = \"https:/image.tmdb.org/t/p/original/\";\n// function Row({title, fetchURL, isLargeRow}) {\n//     const [movies, setMovies] = useState([]);\n//     const [trailerUrl, setTrailerUrl] = useState(\"\");\n//     //snippet of code which runs based on a specific condition/variable\n//     useEffect (() => {\n//         // if [], run once when the row loads, and dont run again.\n//         // we have to make asynchronous call.\n//         async function fetchData() {\n//             const request = await axios.get(fetchURL);\n//             //\"https://api.themoviedb.org/3/\n//             setMovies(request.data.results);\n//             return request;\n//         }\n//         fetchData();\n//     }, [fetchURL]);\n//     const opts = {\n//         height: \"390\",\n//         width: \"100%\",\n//         playerVars: {\n//             autoplay: 1,\n//         },\n//     };\n//     // const handleClick = async(movie) => {\n//     //     if (trailerUrl) {\n//     //         setTrailerUrl(\"\");\n//     //     }else {\n//     //         movieTrailer(movie?.name || \"\")\n//     //         .then((url) => {\n//     //             const urlParams = new URLSearchParams(new URL(url).search);\n//     //             setTrailerUrl(urlParams.get(\"v\"));\n//     //         })\n//     //         .catch((error) => console.log(error));\n//     //     }\n//     // }; \n//     const handleClick = async (movie) => {\n//         if (trailerUrl) {\n//           setTrailerUrl(\"\");\n//         } else {\n//           let trailerurl = await axios.get(\n//             `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n//           );\n//           setTrailerUrl(trailerurl.data.results[0]?.key);\n//         }\n//       };\n//     return (\n//         <div className=\"row\">\n//             <h2>{title}</h2>\n//             <div className=\"row__posters\">\n//                 {movies.map(movie => (\n//                     <img \n//                     key={movie.id}\n//                         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//                         src={`${base_url}${\n//                             isLargeRow ? movie.poster_path : movie.backdrop_path \n//                         }`} \n//                         alr={movie.name}\n//                         // key={movie.id}\n//                         onClick={() => handleClick(movie)}\n//                     />\n//                 ))}\n//             </div>\n//             <YouTube videoId={trailerUrl} opts={opts} />\n//             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//         </div>\n//     )\n// }\n// export default Row\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nconst baseImgUrl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // Options for react-youtube\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => movie.backdrop_path !== null && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${baseImgUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name,\n        onClick: () => handleClick(movie)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","baseImgUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","opts","height","width","playerVars","autoplay","fetchData","request","get","data","results","handleClick","movie","trailerurl","id","key","map","backdrop_path","poster_path","name"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import axios from './axios';\n// import \"./Row.css\";\n// import YouTube from \"react-youtube\";\n// // import movieTrailer from \"movie-trailer\";\n\n// const base_url = \"https:/image.tmdb.org/t/p/original/\";\n\n// function Row({title, fetchURL, isLargeRow}) {\n//     const [movies, setMovies] = useState([]);\n//     const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n//     //snippet of code which runs based on a specific condition/variable\n//     useEffect (() => {\n//         // if [], run once when the row loads, and dont run again.\n//         // we have to make asynchronous call.\n//         async function fetchData() {\n//             const request = await axios.get(fetchURL);\n//             //\"https://api.themoviedb.org/3/\n//             setMovies(request.data.results);\n//             return request;\n//         }\n//         fetchData();\n//     }, [fetchURL]);\n\n//     const opts = {\n//         height: \"390\",\n//         width: \"100%\",\n//         playerVars: {\n//             autoplay: 1,\n//         },\n//     };\n\n//     // const handleClick = async(movie) => {\n//     //     if (trailerUrl) {\n//     //         setTrailerUrl(\"\");\n//     //     }else {\n//     //         movieTrailer(movie?.name || \"\")\n//     //         .then((url) => {\n//     //             const urlParams = new URLSearchParams(new URL(url).search);\n//     //             setTrailerUrl(urlParams.get(\"v\"));\n//     //         })\n//     //         .catch((error) => console.log(error));\n//     //     }\n//     // }; \n\n//     const handleClick = async (movie) => {\n//         if (trailerUrl) {\n//           setTrailerUrl(\"\");\n//         } else {\n//           let trailerurl = await axios.get(\n//             `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n//           );\n//           setTrailerUrl(trailerurl.data.results[0]?.key);\n//         }\n//       };\n\n//     return (\n//         <div className=\"row\">\n//             <h2>{title}</h2>\n            \n//             <div className=\"row__posters\">\n                \n//                 {movies.map(movie => (\n//                     <img \n//                     key={movie.id}\n//                         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//                         src={`${base_url}${\n//                             isLargeRow ? movie.poster_path : movie.backdrop_path \n//                         }`} \n//                         alr={movie.name}\n//                         // key={movie.id}\n//                         onClick={() => handleClick(movie)}\n//                     />\n//                 ))}\n//             </div>\n//             <YouTube videoId={trailerUrl} opts={opts} />\n//             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//         </div>\n//     )\n// }\n\n// export default Row\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n\nconst baseImgUrl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // Options for react-youtube\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = async (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {movies.map(\n          (movie) =>\n            movie.backdrop_path !== null && (\n              <img\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${baseImgUrl}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n                key={movie.id}\n                onClick={() => handleClick(movie)}\n              />\n            )\n        )}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}