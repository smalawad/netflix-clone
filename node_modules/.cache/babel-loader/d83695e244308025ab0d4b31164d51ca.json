{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\n\nconst base_url = function Row({\n  title,\n  fetchURL\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); //snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    // if [], run once when the row loads, and dont run again.\n    // we have to make asynchronous call.\n    async function fetchData() {\n      const request = await axios.get(fetchURL); //\"https://api.themoviedb.org/3/\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.poster_path,\n        alr: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(base_url, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\nexport default Row;","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","base_url","Row","title","fetchURL","movies","setMovies","fetchData","request","get","data","results","console","table","map","movie","poster_path","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,QAAQ,GACd,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAb,EAAgC;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CAD4B,CAG5B;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA,mBAAeQ,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAUL,QAAV,CAAtB,CADuB,CAEvB;;AACAE,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT;AAYAQ,EAAAA,OAAO,CAACC,KAAR,CAAcR,MAAd;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKE,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACb;AAAK,QAAA,GAAG,EAAEA,KAAK,CAACC,WAAhB;AAA6B,QAAA,GAAG,EAAED,KAAK,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA9BD;;GAAMhB,Q;;AAgCN,eAAeC,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\n\nconst base_url =\nfunction Row({title, fetchURL}) {\n    const [movies, setMovies] = useState([]);\n\n    //snippet of code which runs based on a specific condition/variable\n    useEffect (() => {\n        // if [], run once when the row loads, and dont run again.\n        // we have to make asynchronous call.\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            //\"https://api.themoviedb.org/3/\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    console.table(movies);\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img src={movie.poster_path} alr={movie.name}/>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}