{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// import React, { useState, useEffect } from 'react'\n// import axios from './axios';\n// import \"./Row.css\";\n// import YouTube from \"react-youtube\";\n// // import movieTrailer from \"movie-trailer\";\n// const base_url = \"https:/image.tmdb.org/t/p/original/\";\n// function Row({title, fetchURL, isLargeRow}) {\n//     const [movies, setMovies] = useState([]);\n//     const [trailerUrl, setTrailerUrl] = useState(\"\");\n//     //snippet of code which runs based on a specific condition/variable\n//     useEffect (() => {\n//         // if [], run once when the row loads, and dont run again.\n//         // we have to make asynchronous call.\n//         async function fetchData() {\n//             const request = await axios.get(fetchURL);\n//             //\"https://api.themoviedb.org/3/\n//             setMovies(request.data.results);\n//             return request;\n//         }\n//         fetchData();\n//     }, [fetchURL]);\n//     const opts = {\n//         height: \"390\",\n//         width: \"100%\",\n//         playerVars: {\n//             autoplay: 1,\n//         },\n//     };\n//     // const handleClick = async(movie) => {\n//     //     if (trailerUrl) {\n//     //         setTrailerUrl(\"\");\n//     //     }else {\n//     //         movieTrailer(movie?.name || \"\")\n//     //         .then((url) => {\n//     //             const urlParams = new URLSearchParams(new URL(url).search);\n//     //             setTrailerUrl(urlParams.get(\"v\"));\n//     //         })\n//     //         .catch((error) => console.log(error));\n//     //     }\n//     // }; \n//     const handleClick = async (movie) => {\n//         if (trailerUrl) {\n//           setTrailerUrl(\"\");\n//         } else {\n//           let trailerurl = await axios.get(\n//             `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n//           );\n//           setTrailerUrl(trailerurl.data.results[0]?.key);\n//         }\n//       };\n//     return (\n//         <div className=\"row\">\n//             <h2>{title}</h2>\n//             <div className=\"row__posters\">\n//                 {movies.map(movie => (\n//                     <img \n//                     key={movie.id}\n//                         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//                         src={`${base_url}${\n//                             isLargeRow ? movie.poster_path : movie.backdrop_path \n//                         }`} \n//                         alr={movie.name}\n//                         // key={movie.id}\n//                         onClick={() => handleClick(movie)}\n//                     />\n//                 ))}\n//             </div>\n//             <YouTube videoId={trailerUrl} opts={opts} />\n//             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//         </div>\n//     )\n// }\n// export default Row\nimport React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import Youtube from\"react-youtube\";var baseImgUrl=\"https://image.tmdb.org/t/p/original\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];// Options for react-youtube\nvar opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var _trailerurl$data$resu,trailerurl;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!trailerUrl){_context2.next=4;break;}setTrailerUrl(\"\");_context2.next=8;break;case 4:_context2.next=6;return axios.get(\"/movie/\".concat(movie.id,\"/videos?api_key=fb34530271b349314af0de263d16ab5a\"));case 6:trailerurl=_context2.sent;setTrailerUrl((_trailerurl$data$resu=trailerurl.data.results[0])===null||_trailerurl$data$resu===void 0?void 0:_trailerurl$data$resu.key);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return movie.backdrop_path!==null&&/*#__PURE__*/_jsx(\"img\",{className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(baseImgUrl).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name,onClick:function onClick(){return handleClick(movie);}},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(Youtube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/home/shrikanth/shrikanth/frontend/clones/netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","baseImgUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","opts","height","width","playerVars","autoplay","fetchData","get","request","data","results","handleClick","movie","id","trailerurl","key","map","backdrop_path","poster_path","name"],"mappings":"unBAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAEA,GAAMC,CAAAA,UAAU,CAAG,qCAAnB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,eAChBR,QAAQ,CAAC,EAAD,CADQ,wCACrCS,MADqC,eAC7BC,SAD6B,8BAERV,QAAQ,CAAC,EAAD,CAFA,yCAErCW,UAFqC,eAEzBC,aAFyB,eAI5C;AACA,GAAMC,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAQAhB,SAAS,CAAC,UAAM,SACCiB,CAAAA,SADD,qIACd,qKACwBhB,CAAAA,KAAK,CAACiB,GAAN,CAAUZ,QAAV,CADxB,QACQa,OADR,eAEEV,SAAS,CAACU,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACX,QAAD,CAPM,CAAT,CASA,GAAMgB,CAAAA,WAAW,2FAAG,kBAAOC,KAAP,+JACdb,UADc,0BAEhBC,aAAa,CAAC,EAAD,CAAb,CAFgB,qDAIOV,CAAAA,KAAK,CAACiB,GAAN,kBACXK,KAAK,CAACC,EADK,qDAJP,QAIZC,UAJY,gBAOhBd,aAAa,wBAACc,UAAU,CAACL,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,gDAAC,sBAA4BK,GAA7B,CAAb,CAPgB,wDAAH,kBAAXJ,CAAAA,WAAW,6CAAjB,CAWA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAKjB,KAAL,EADF,cAGE,YAAK,SAAS,CAAC,aAAf,UACGG,MAAM,CAACmB,GAAP,CACC,SAACJ,KAAD,QACEA,CAAAA,KAAK,CAACK,aAAN,GAAwB,IAAxB,eACE,YACE,SAAS,sBAAgBrB,UAAU,EAAI,iBAA9B,CADX,CAEE,GAAG,WAAKJ,UAAL,SACDI,UAAU,CAAGgB,KAAK,CAACM,WAAT,CAAuBN,KAAK,CAACK,aADtC,CAFL,CAKE,GAAG,CAAEL,KAAK,CAACO,IALb,CAOE,OAAO,CAAE,yBAAMR,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAPX,EAMOA,KAAK,CAACC,EANb,CAFJ,EADD,CADH,EAHF,CAmBGd,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEE,IAApC,EAnBjB,GADF,CAuBD,CAED,cAAeR,CAAAA,GAAf","sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import axios from './axios';\n// import \"./Row.css\";\n// import YouTube from \"react-youtube\";\n// // import movieTrailer from \"movie-trailer\";\n\n// const base_url = \"https:/image.tmdb.org/t/p/original/\";\n\n// function Row({title, fetchURL, isLargeRow}) {\n//     const [movies, setMovies] = useState([]);\n//     const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n//     //snippet of code which runs based on a specific condition/variable\n//     useEffect (() => {\n//         // if [], run once when the row loads, and dont run again.\n//         // we have to make asynchronous call.\n//         async function fetchData() {\n//             const request = await axios.get(fetchURL);\n//             //\"https://api.themoviedb.org/3/\n//             setMovies(request.data.results);\n//             return request;\n//         }\n//         fetchData();\n//     }, [fetchURL]);\n\n//     const opts = {\n//         height: \"390\",\n//         width: \"100%\",\n//         playerVars: {\n//             autoplay: 1,\n//         },\n//     };\n\n//     // const handleClick = async(movie) => {\n//     //     if (trailerUrl) {\n//     //         setTrailerUrl(\"\");\n//     //     }else {\n//     //         movieTrailer(movie?.name || \"\")\n//     //         .then((url) => {\n//     //             const urlParams = new URLSearchParams(new URL(url).search);\n//     //             setTrailerUrl(urlParams.get(\"v\"));\n//     //         })\n//     //         .catch((error) => console.log(error));\n//     //     }\n//     // }; \n\n//     const handleClick = async (movie) => {\n//         if (trailerUrl) {\n//           setTrailerUrl(\"\");\n//         } else {\n//           let trailerurl = await axios.get(\n//             `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n//           );\n//           setTrailerUrl(trailerurl.data.results[0]?.key);\n//         }\n//       };\n\n//     return (\n//         <div className=\"row\">\n//             <h2>{title}</h2>\n            \n//             <div className=\"row__posters\">\n                \n//                 {movies.map(movie => (\n//                     <img \n//                     key={movie.id}\n//                         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n//                         src={`${base_url}${\n//                             isLargeRow ? movie.poster_path : movie.backdrop_path \n//                         }`} \n//                         alr={movie.name}\n//                         // key={movie.id}\n//                         onClick={() => handleClick(movie)}\n//                     />\n//                 ))}\n//             </div>\n//             <YouTube videoId={trailerUrl} opts={opts} />\n//             {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n//         </div>\n//     )\n// }\n\n// export default Row\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n\nconst baseImgUrl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // Options for react-youtube\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = async (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {movies.map(\n          (movie) =>\n            movie.backdrop_path !== null && (\n              <img\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${baseImgUrl}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n                key={movie.id}\n                onClick={() => handleClick(movie)}\n              />\n            )\n        )}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}