{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","opts","height","width","playerVars","autoplay","handleClick","movie","id","trailerurl","key","className","map","src","poster_path","backdrop_path","alr","name","onClick","videoId","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fecthActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backdropPosition","original_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUASeA,E,OAJEC,EAAMC,OAAQ,CAC3BC,QAAS,iC,eC4EEC,MA1Ef,YAA6C,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WAAa,EACZC,mBAAS,IADG,mBACjCC,EADiC,KACzBC,EADyB,OAEJF,mBAAS,IAFL,mBAEjCG,EAFiC,KAErBC,EAFqB,KAKxCC,qBAAW,WAAM,4CAGb,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAGIN,EAAUM,EAAQC,KAAKC,SAH3B,kBAIWF,GAJX,4CAHa,0DASbG,KACD,CAACb,IAEJ,IAAMc,EAAO,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,IAiBZC,EAAW,uCAAG,WAAOC,GAAP,iBAAAZ,EAAA,0DACZH,EADY,gBAEdC,EAAc,IAFA,sCAISX,EAAMc,IAAN,iBACXW,EAAMC,GADK,qDAJT,OAIVC,EAJU,OAOdhB,EAAa,UAACgB,EAAWX,KAAKC,QAAQ,UAAzB,aAAC,EAA4BW,KAP5B,2CAAH,sDAWjB,OACI,sBAAKC,UAAU,MAAf,UACI,6BAAKzB,IAEL,qBAAKyB,UAAU,eAAf,SAEKrB,EAAOsB,KAAI,SAAAL,GAAK,OACb,qBAEII,UAAS,sBAAiBvB,GAAc,oBACxCyB,IAAG,UA7DV,uCA6DU,OACCzB,EAAamB,EAAMO,YAAcP,EAAMQ,eAE3CC,IAAKT,EAAMU,KAEXC,QAAS,kBAAMZ,EAAYC,KAP1BA,EAAMC,SAWnB,cAAC,IAAD,CAASW,QAAS3B,EAAYS,KAAMA,IACnCT,GAAc,cAAC,IAAD,CAAS2B,QAAS3B,EAAYS,KAAMA,QC7EzDmB,EAAQ,mCAEC,GACXC,cAAc,8BAAD,OAAgCD,EAAhC,mBACbE,sBAAsB,wBAAD,OAA0BF,EAA1B,sBACrBG,cAAc,4BAAD,OAA8BH,EAA9B,mBACbI,kBAAkB,2BAAD,OAA6BJ,EAA7B,mBACjBK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,mBAAmB,2BAAD,OAA6BP,EAA7B,sBAClBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,oB,MC+FPS,MAjDf,WAAmB,IAeCC,EAAKC,EAfP,EACU1C,qBADV,mBACTkB,EADS,KACFyB,EADE,KAmBhB,OAjBAtC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIqC,EAASX,uBAD3C,cACQzB,EADR,OAEEmC,EACEnC,EAAQC,KAAKC,QACXmC,KAAKC,MAAMD,KAAKE,SAAWvC,EAAQC,KAAKC,QAAQsC,OAAS,KAJ/D,kBAOSxC,GAPT,4CADc,uBAAC,WAAD,wBAUdG,KACC,IAOD,yBACEW,UAAU,SACV2B,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,2CAAD,cAA6CjC,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAOQ,cAApD,MACf0B,iBAAkB,iBALtB,UASE,sBAAK9B,UAAU,kBAAf,UAEE,oBAAIA,UAAU,eAAd,UACQ,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOrB,SAAP,OAAgBqB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOU,QAAvB,OAA+BV,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOmC,iBAIzC,sBAAK/B,UAAU,iBAAf,UACE,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,yBAIF,oBAAIA,UAAU,qBAAd,UA3BYmB,EA2BgC,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAOoC,SA3BnCZ,EA2B6C,KA1BxD,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKO,QAASN,EAAID,EAAIc,OAAO,EAAGb,EAAI,GAAK,MAAQD,QA4BtD,qBAAKnB,UAAU,0B,MCrENkC,MAxBf,WACE,OACE,sBAAKlC,UAAU,MAAf,UACE,wBAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACEzB,MAAM,oBACNC,SAAU8C,EAASX,sBACnBlC,YAAU,IAEZ,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU8C,EAASZ,gBAC7C,cAAC,EAAD,CAAKnC,MAAM,YAAYC,SAAU8C,EAASV,gBAC1C,cAAC,EAAD,CAAKrC,MAAM,gBAAgBC,SAAU8C,EAAST,oBAC9C,cAAC,EAAD,CAAKtC,MAAM,gBAAgBC,SAAU8C,EAASR,oBAC9C,cAAC,EAAD,CAAKvC,MAAM,gBAAgBC,SAAU8C,EAASP,oBAC9C,cAAC,EAAD,CAAKxC,MAAM,iBAAiBC,SAAU8C,EAASN,qBAC/C,cAAC,EAAD,CAAKzC,MAAM,kBAAkBC,SAAU8C,EAASL,yBCbvCkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a501e0e7.chunk.js","sourcesContent":["// onstruct url\nimport axios from \"axios\";\n\n/** base url to make request to the movie database */\n\nconst instance = axios.create ({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https:/image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchURL, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    //snippet of code which runs based on a specific condition/variable\n    useEffect (() => {\n        // if [], run once when the row loads, and dont run again.\n        // we have to make asynchronous call.\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            //\"https://api.themoviedb.org/3/\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    // const handleClick = async(movie) => {\n    //     if (trailerUrl) {\n    //         setTrailerUrl(\"\");\n    //     }else {\n    //         movieTrailer(movie?.name || \"\")\n    //         .then((url) => {\n    //             const urlParams = new URLSearchParams(new URL(url).search);\n    //             setTrailerUrl(urlParams.get(\"v\"));\n    //         })\n    //         .catch((error) => console.log(error));\n    //     }\n    // }; \n\n    const handleClick = async (movie) => {\n        if (trailerUrl) {\n          setTrailerUrl(\"\");\n        } else {\n          let trailerurl = await axios.get(\n            `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n          );\n          setTrailerUrl(trailerurl.data.results[0]?.key);\n        }\n      };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path \n                        }`} \n                        alr={movie.name}\n                        // key={movie.id}\n                        onClick={() => handleClick(movie)}\n                    />\n                ))}\n            </div>\n            <YouTube videoId={trailerUrl} opts={opts} />\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row\n","const API_KEY=\"28f0cc330ceb6ad4071456d1d98a51f3\";\n\nexport default {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fecthActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\n","// import React, { useState, useEffect } from 'react'\n// import axios from './axios';\n// import requests from './requests';\n// import \"./Banner.css\";\n\n// function Banner() {\n//     const [movie, setMovie] = useState([]);\n\n// // this snipet of code will pic random picture and show on banner\n//     useEffect(() => {\n//         async function fetchData() {\n//             const request = await axios.get(requests.fetchNetflixOriginals);\n//             setMovie(\n//                 request.data.results[\n//                     Math.floor(Math.random() * request.data.results.length - 1)\n//                 ]\n//             );\n//             return request;\n//         }\n//         fetchData();\n//     }, []);\n\n//     function truncate (str, n) {\n//         return str?.lenght > n ? str.substr(0, n - 1) + \"...\" : str;\n//     }\n\n//     return (\n//         <header className=\"banner\" \n//             style={{\n//                 backgroundSize:\"cover\",\n//                 backgroungImage: `url(\n//                     \"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\"\n//                 )`,\n//                 backgroundPosition: \"center center\",\n//             }}\n//         >\n//             <div className=\"banner__contents\">\n//             <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n//             <div className=\"banner__buttons\">\n//                 <button className=\"banner_button\">Play</button>\n//                 <button className=\"banner_button\">My List</button>\n//             </div>\n//             <h1 className=\"banner_description\">{truncate(movie?.overview, 200)}</h1>\n//        </div>\n//        <div className=\"banner_fadeBottom\" />\n//      </header>\n//     )\n// }\n\n// export default Banner\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n        backdropPosition: \"center center\",\n      }}\n    >\n      {/* Background image */}\n      <div className=\"banner_contents\">\n        {/* title */}\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        {/* 2 buttons */}\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List </button>\n        </div>\n\n        {/* description */}\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 200)}</h1>\n      </div>\n      <div className=\"banner_fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <nav ></nav>\n      {/* Nav */}\n      <Banner />\n\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchURL={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchURL={requests.fecthActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies}/>\n      <Row title=\"Document Movies\" fetchURL={requests.fetchDocumentaries}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}